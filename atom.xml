<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BigsHuangMr</title>
  
  <subtitle>初入江湖请多多指教！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-29T15:37:46.818Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HuangMr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中通过JDBC连接数据库</title>
    <link href="http://yoursite.com/2019/11/28/Java%E4%B8%AD%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/11/28/Java%E4%B8%AD%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-11-28T09:19:42.000Z</published>
    <updated>2019-11-29T15:37:46.818Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;Java中如何得到用户存储的在数据库中的数据，通过JDBC来实现Java对数据库的访问。</p><a id="more"></a><p><strong>简介：</strong></p><ol><li><p>ODBC(开放数据库连接)：是微软公司提供的一组对数据库访问规范化标准API。</p></li><li><p>JDBC:是OBDC的Java版本。由Sun公司提出的使用Java访问数据库的。</p></li><li><p>JDBC的体系结构分为两层：</p><ol><li>JDBC Driver Interface（驱动程序管理窗口）。</li><li>JDBC API（一系列的接口，它使得应用程序可以进行数据库的连接，执行SQL语句并返回结果集。）</li></ol></li><li><p><a href="https://baike.baidu.com/item/JDBC%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/20866650?fr=aladdin" target="_blank" rel="noopener">JDBC的驱动程序</a>：根据访问数据库的技术不同，JDBC驱动的程序相应的分为了四种类型。不同的驱动有着不一样的特性以及使用方法。</p><ol><li>JDBC-ODBC桥驱动程序（JDBC-ODBC Brige Driver）</li><li>部分Java的本地JDBC API驱动程序</li><li>纯Java的数据库中间件驱动程序</li><li>纯Java的JDBC驱动程序（通常使用的是这种方式）</li></ol></li></ol><hr><p><strong>准备：</strong></p><p>&nbsp;&nbsp;各数据库厂商都提供对JDBC的支持，我们在对数据库进行连接时需要对应数据库的相关驱动程序文件，我使用的MySQL数据库所导入的就是MySQL的文件（<a href="http://central.maven.org/maven2/mysql/mysql-connector-java/" target="_blank" rel="noopener">mysql-connector-java.jar</a>）<br><strong>注意：</strong> 程序驱动文件的版本要与你数据库的版本对应，如果不匹配会出现错误!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//数据库驱动的基本信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Driver = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line"><span class="comment">//数据库以及表的链接地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/testemp"</span>;</span><br><span class="line"><span class="comment">//数据库的用户名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USE = <span class="string">"root"</span>;</span><br><span class="line">    <span class="comment">//数据库的密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PassWord = <span class="string">"root"</span>;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDBCDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载数据库驱动</span></span><br><span class="line">            Class.forName(Driver);</span><br><span class="line">            <span class="comment">//2.建立连接</span></span><br><span class="line">            connection = DriverManager.getConnection(URL,USE,PassWord);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.关闭连接，释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>我的MySQL版本是8.0及以后的版本所以JDBC驱动的加载为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Driver = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br></pre></td></tr></table></figure><p>如果你的版本是8.0之前的话驱动的加载为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br></pre></td></tr></table></figure><p>我的数据库连接地址由于我修改数据库的配置文件所以不用设置SSL连接、时区、字符集以及数据库的引擎，但如果你没有更改数据库的配置文件你需要设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/testemp?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSLL=false"</span>;</span><br></pre></td></tr></table></figure><p>字符集的设置是为了防止中文乱码，时区设置是当你进行数据库时间操作时与你所在的时区一致。</p><p>8.0之前版本的数据库连接地址应该为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/testemp?useUnicode=true&amp;autoReconnect=true"</span>;</span><br></pre></td></tr></table></figure><p>其中localhost:3306是指本地地址加上对应的端口号，如果你使用IP地址的话，应该将localhost:3306改为对应的IP地址加上对应的端口号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;Java中如何得到用户存储的在数据库中的数据，通过JDBC来实现Java对数据库的访问。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/11/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/11/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-11-26T10:38:55.000Z</published>
    <updated>2019-11-29T13:12:49.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中的基本集合框架"><a href="#Java中的基本集合框架" class="headerlink" title="Java中的基本集合框架"></a>Java中的基本集合框架</h2><h2 id="nbsp-nbsp-在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。"><a href="#nbsp-nbsp-在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。" class="headerlink" title="&nbsp;&nbsp;在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。"></a>&nbsp;&nbsp;在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。</h2><a id="more"></a><ol><li><p><strong>Collection（接口）集合</strong><br><img src="https://i.imgur.com/pQ8kfxu.png" alt=""><br>由上图可知List集合，Set集合，Vector集合都实现了Collection集合这个接口，但List集合，Set集合和Vector集合三者有着很大的区别。</p><ol><li>List（接口）集合：是一个有序的Collection,这里有序是指存入集合的顺序和从集合中取出来的顺序是一致的。而且List集合可以存储重复的元素。在List集合里有派生了ArrayList与LinkedList它两又有许多的不同之处。<ol><li>ArrayList：底层是基于动态数组构成的，存储情况是一段连续的内存空间，所以在查询数组的某一个元素时Arraylist的速度要快于Linkedlist。且ArrayList是线程不安全的。</li><li>LinkedList：底层是基于链表构成的，存储情况可能是一段联系的内存空间也可能是一段离散的空间，由于是链表结构它就存在指针当进行增加元素或者删除元素时只要根据对应的指针进行操作而ArrayList则需要对全部元素进行一个移位所以在增加与删除操作时LinkedList集合快于ArrayList集合，LinkedList也是线程不安全的</li></ol></li><li>Set（接口）集合：是一个无序的Collection集合，而且它能保证元素的唯一不能存储重复元素。在Set集合中也产生了不一样的子类集合如HashSet和TreeSet。<ol><li>HashSet：底层是基于hash表来实现的，通过hashcode()方法来比较两个元素的hash码进行排序。允许存在null值但只能出现一次因为null的hash码都相同所以不能重复出现。</li><li>TreeSet：底层是基于红黑树，不允许存储null值。</li></ol></li><li>Vector集合：底层基于数组与ArrayList基本相似但不同之处是Vector集合是线程安全的。</li></ol></li><li><p><strong>Map（接口）集合</strong><br><img src="https://i.imgur.com/eEZZFUk.png" alt=""><br>Map集合与Collection集合有所不同的是Map集合是双列集合也就是（key-value）的形式，key值不能重复出现而value可以出现多次。</p><ol><li>TreeMap集合：底层采用的红黑树构成的，它是一个有序的集合，可以根据创建映射时所提供的比较强Comparator来进行比较排序</li><li>HashMap集合：底层采用的是hash表，是无序集合且线程是不安全的。允许（null-null）的组合存在</li><li>HashTable集合：底层也是采用hash表，但它是线程安全的，它无论是key还是value都不允许出现null。</li></ol></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java中的基本集合框架&quot;&gt;&lt;a href=&quot;#Java中的基本集合框架&quot; class=&quot;headerlink&quot; title=&quot;Java中的基本集合框架&quot;&gt;&lt;/a&gt;Java中的基本集合框架&lt;/h2&gt;&lt;h2 id=&quot;nbsp-nbsp-在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。&quot;&gt;&lt;a href=&quot;#nbsp-nbsp-在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。&quot; class=&quot;headerlink&quot; title=&quot;&amp;nbsp;&amp;nbsp;在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。&quot;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;在Java中集合与数组类似都用于存储Java中所有数据类型的对象，但与数组相比它优点在于数组一旦被创建它的数组长度就不能被改变而集合的优点就是在于集合是可以改变长度的且数组存储的数据类型只有一种而集合可以存储多种的数据类型。&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
